// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    $("#loginButton").on("click", function(e) {
      var authHash, password, username;
      username = $("#username").val();
      password = $("#password").val();
      authHash = ch.make_base_auth(username, password);
      return $.ajax({
        type: "POST",
        url: "login",
        async: true,
        data: {
          "username": 'username',
          "password": 'password'
        },
        beforeSend: function(xhr) {
          return xhr.setRequestHeader("Authorization", authHash);
        },
        success: function(xhr) {
          console.log(xhr);
          return window.location.href = "dash";
        },
        error: function(xhr, type) {
          var $responseText, message, messageJSON;
          console.log("error");
          console.log(xhr);
          $responseText = JSON.parse(xhr.responseText);
          if ($responseText === null) {
            message = "Something is wrong with REDIS";
          } else {
            message = $responseText.message;
          }
          $.pnotify({
            title: xhr.statusText,
            text: message,
            type: 'error'
          });
          return messageJSON = JSON.parse(xhr.responseText);
        }
      });
    });
    $("#signUpButton").on("click", function(e) {
      var authHash, password, passwordAgain, username;
      username = $("#usernameSP").val();
      password = $("#passwordSP").val();
      passwordAgain = $("#passwordAgainSP").val();
      if (password === passwordAgain) {
        authHash = ch.make_base_auth(username, password);
        return $.ajax({
          type: "POST",
          url: "user",
          async: true,
          dataType: 'json',
          data: {
            "username": username,
            "password": password
          },
          success: function() {
            alert("U have succesfully sign up. plesase login");
            $("#username").val(username);
            $("#password").val(password);
            return $("#loginButton").trigger("click");
          },
          error: function(xhr, type) {
            var errorMsg;
            console.log(xhr);
            errorMsg = JSON.parse(xhr.responseText);
            console.log(errorMsg);
            return alert(errorMsg.errors[0].message);
          }
        });
      } else {
        return alert("Passwords not the same");
      }
    });
    $("button.disableApp").on("click", function() {
      var $button, $tr, appId, data;
      appId = $(this).data("appid");
      data = {
        "id": appId,
        "active": false
      };
      $tr = $("#" + appId);
      $button = $(this);
      return socket.put("/application", data, function(response) {
        console.log(response);
        $tr.removeClass("success").addClass("warning");
        $button.prop('disabled', true);
        return $($button.prev(".enableApp")).prop('disabled', false);
      });
    });
    return $("button.enableApp").on("click", function() {
      var $button, appId, data;
      appId = $(this).data("appid");
      $button = $(this);
      data = {
        "id": appId,
        "active": true
      };
      return socket.put("/application", data, function(response) {
        console.log(response);
        $("#" + appId).removeClass("warning").addClass("success");
        $button.prop('disabled', true);
        return $($button.next(".disableApp")).prop('disabled', false);
      });
    });
  });

  $("#saveAppFromModal").on("click", function() {
    var active, data;
    if ($("#appEnabled").val() === "on") {
      active = true;
    } else {
      active = false;
    }
    data = {
      "name": $("#appName").val(),
      "active": active
    };
    return socket.post("/application/create", data, function(response) {
      console.log(response);
      return location.reload();
    });
  });

  $("#saveEnvFromModal").on("click", function() {
    var baseEnv, data;
    if ($("#baseEnv").val() === "on") {
      baseEnv = true;
    } else {
      baseEnv = false;
    }
    data = {
      name: $("#envName").val(),
      baseEnv: baseEnv,
      appUUID: $(this).data("appid")
    };
    return socket.post("/environment", data, function(response) {
      return console.log(response);
    });
  });

  $("button.deleteEnv").on("click", function(e) {
    var $this, data;
    $this = $(this);
    data = {
      "id": $this.data('envid')
    };
    return socket["delete"]('/environment', data, function(_res) {
      return $this.closest('tr').remove();
    });
  });

  $("button.deleteApp").on("click", function(e) {
    var $this, data;
    $this = $(this);
    data = {
      "id": $this.data('appid')
    };
    return socket["delete"]('/application', data, function(_res) {
      return $this.closest('tr').remove();
    });
  });

  $("button.disableEnv").on("click", function() {
    var $button, $tr, data, envid;
    envid = $(this).data("envid");
    data = {
      "id": envid,
      "active": false
    };
    $tr = $("#" + envid);
    $button = $(this);
    return socket.put("/environment", data, function(response) {
      console.log(response);
      $tr.removeClass("success").addClass("warning");
      $button.prop('disabled', true);
      return $($button.prev(".enableEnv")).prop('disabled', false);
    });
  });

  $("button.enableEnv").on("click", function() {
    var $button, data, envid;
    envid = $(this).data("envid");
    $button = $(this);
    data = {
      "id": envid,
      "active": true
    };
    return socket.put("/environment", data, function(response) {
      console.log(response);
      $("#" + envid).removeClass("warning").addClass("success");
      $button.prop('disabled', true);
      return $($button.next(".disableEnv")).prop('disabled', false);
    });
  });

}).call(this);
